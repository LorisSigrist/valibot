import { Language } from './types';

// prettier-ignore
const language: Language = {
  code:             'de-CH',
  schema:           (issue) => `Ungültigä Typ: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
  specific: {
    bic:            (issue) => `Ungültigä BIC: ${issue.received} erhaltä`,
    bytes:          (issue) => `Ungültigi Bytes: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    creditCard:     (issue) => `Ungültigi Kreditchartä: ${issue.received} erhaltä`,
    cuid2:          (issue) => `Ungültigi Cuid2: ${issue.received} erhaltä`,
    custom:         (issue) => `Ungültigi Iigab: ${issue.received} erhaltä`,
    customAsync:    (issue) => `Ungültigi Iigab: ${issue.received} erhaltä`,
    decimal:        (issue) => `Ungültigi Dezimalzahl: ${issue.received} erhaltä`,
    email:          (issue) => `Ungültigi E-Mail: ${issue.received} erhaltä`,
    emoji:          (issue) => `Ungültigs Emoji: ${issue.received} erhaltä`,
    endsWith:       (issue) => `Ungültigs Ändi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    equal:          (issue) => `Ungültigä Wert: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    excludes:       (issue) => `Ungültigä Inhalt: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    finite:         (issue) => `Ungültigs Endlichi Zahl: ${issue.received} erhaltä`,
    hash:           (issue) => `Ungültigä Hash: ${issue.received} erhaltä`,
    hexColor:       (issue) => `Ungültigi Hex-Farb: ${issue.received} erhaltä`,
    hexadecimal:    (issue) => `Ungültigi Hexadezimalzahl: ${issue.received} erhaltä`,
    imei:           (issue) => `Ungültigi IMEI: ${issue.received} erhaltä`,
    includes:       (issue) => `Ungültigä Inhalt: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    integer:        (issue) => `Ungültigi Ganzzahl: ${issue.received} erhaltä`,
    ip:             (issue) => `Ungültigi IP: ${issue.received} erhaltä`,
    ipv4:           (issue) => `Ungültigi IPv4: ${issue.received} erhaltä`,
    ipv6:           (issue) => `Ungültigi IPv6: ${issue.received} erhaltä`,
    isoDate:        (issue) => `Ungültigs Datum: ${issue.received} erhaltä`,
    isoDateTime:    (issue) => `Ungültigi Datums-Ziit: ${issue.received} erhaltä`,
    isoTime:        (issue) => `Ungültigi Ziit: ${issue.received} erhaltä`,
    isoTimeSecond:  (issue) => `Ungültigi Ziitsekundä: ${issue.received} erhaltä`,
    isoTimestamp:   (issue) => `Ungültigä Ziitstämpel: ${issue.received} erhaltä`,
    isoWeek:        (issue) => `Ungültigi Wuchä: ${issue.received} erhaltä`,
    length:         (issue) => `Ungültigi Längi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    mac:            (issue) => `Ungültigi MAC: ${issue.received} erhaltä`,
    mac48:          (issue) => `Ungültigi 48-bit MAC: ${issue.received} erhaltä`,
    mac64:          (issue) => `Ungültigi 64-bit MAC: ${issue.received} erhaltä`,
    maxBytes:       (issue) => `Ungültigi Bytes: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    maxLength:      (issue) => `Ungültigi Längi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    maxSize:        (issue) => `Ungültigi Grössi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    maxValue:       (issue) => `Ungültigä Wärt: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    mimeType:       (issue) => `Ungültigä MIME-Typ: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    minBytes:       (issue) => `Ungültigi Bytes: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    minLength:      (issue) => `Ungültigi Längi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    minSize:        (issue) => `Ungültigi Grössi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    minValue:       (issue) => `Ungültigä Wert: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    multipleOf:     (issue) => `Ungültigs Vielfachs: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    notBytes:       (issue) => `Ungültigi Bytes: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    notLength:      (issue) => `Ungültigi Längi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    notSize:        (issue) => `Ungültigi Grössi: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    notValue:       (issue) => `Ungültigä Wert: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    octal:          (issue) => `Ungültigi Octalzahl: ${issue.received} erhaltä`,
    regex:          (issue) => `Ungültigs Format: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    safeInteger:    (issue) => `Ungültigi sicheri Ganzzahl: ${issue.received} erhaltä`,
    size:           (issue) => `Ungültigi Größe: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    startsWith:     (issue) => `Ungültigä Start: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
    ulid:           (issue) => `Ungültigi ULID: ${issue.received} erhaltä`,
    url:            (issue) => `Ungültigi URL: ${issue.received} erhaltä`,
    uuid:           (issue) => `Ungültigi UUID: ${issue.received} erhaltä`,
    value:          (issue) => `Ungültigä Wärt: ${issue.expected} erwartet aber ${issue.received} erhaltä`,
  },
};

export default language;
